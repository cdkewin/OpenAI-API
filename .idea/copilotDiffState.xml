<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main.py" />
              <option name="originalContent" value="import openai&#10;import os&#10;import speech_recognition as sr&#10;import pyttsx3&#10;&#10;def chat_with_openai(messages):&#10;    api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)&#10;    if not api_key:&#10;        raise ValueError(&quot;OPENAI_API_KEY environment variable not set.&quot;)&#10;    openai.api_key = api_key&#10;    response = openai.chat.completions.create(&#10;        model=&quot;gpt-3.5-turbo&quot;,&#10;        messages=messages&#10;    )&#10;    return response.choices[0].message.content&#10;&#10;def recognize_speech():&#10;    recognizer = sr.Recognizer()&#10;    with sr.Microphone() as source:&#10;        print(&quot;Say something...&quot;)&#10;        audio = recognizer.listen(source)&#10;    try:&#10;        text = recognizer.recognize_google(audio)&#10;        print(&quot;You said:&quot;, text)&#10;        return text&#10;    except sr.UnknownValueError:&#10;        print(&quot;Sorry, I could not understand the audio.&quot;)&#10;        return None&#10;    except sr.RequestError as e:&#10;        print(f&quot;Could not request results; {e}\nPlease check your internet connection or try again later.&quot;)&#10;        return None&#10;&#10;def speak_text(text):&#10;    engine = pyttsx3.init()&#10;    engine.say(text)&#10;    engine.runAndWait()&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    messages = [&#10;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant.&quot;}&#10;    ]&#10;    while True:&#10;        user_input = recognize_speech()&#10;        if user_input:&#10;            messages.append({&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: user_input})&#10;            try:&#10;                reply = chat_with_openai(messages)&#10;                print(&quot;Assistant:&quot;, reply)&#10;                speak_text(reply)&#10;                messages.append({&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: reply})&#10;            except Exception as e:&#10;                print(&quot;Error:&quot;, e)&#10;        else:&#10;            print(&quot;Please try speaking again.&quot;)&#10;" />
              <option name="updatedContent" value="import openai&#10;import os&#10;import speech_recognition as sr&#10;import pyttsx3&#10;&#10;def chat_with_openai(messages):&#10;    api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)&#10;    if not api_key:&#10;        raise ValueError(&quot;OPENAI_API_KEY environment variable not set.&quot;)&#10;    openai.api_key = api_key&#10;    response = openai.chat.completions.create(&#10;        model=&quot;gpt-3.5-turbo&quot;,&#10;        messages=messages&#10;    )&#10;    return response.choices[0].message.content&#10;&#10;def recognize_speech():&#10;    recognizer = sr.Recognizer()&#10;    with sr.Microphone() as source:&#10;        print(&quot;Say something...&quot;)&#10;        audio = recognizer.listen(source)&#10;    try:&#10;        text = recognizer.recognize_google(audio)&#10;        print(&quot;You said:&quot;, text)&#10;        return text&#10;    except sr.UnknownValueError:&#10;        print(&quot;Sorry, I could not understand the audio.&quot;)&#10;        return None&#10;    except sr.RequestError as e:&#10;        print(f&quot;Could not request results; {e}\nPlease check your internet connection or try again later.&quot;)&#10;        return None&#10;&#10;def speak_text(text):&#10;    engine = pyttsx3.init()&#10;    engine.say(text)&#10;    engine.runAndWait()&#10;&#10;def test_openai_api():&#10;    api_key = os.getenv(&quot;OPENAI_API_KEY&quot;)&#10;    if not api_key:&#10;        print(&quot;OPENAI_API_KEY environment variable not set.&quot;)&#10;        return False&#10;    openai.api_key = api_key&#10;    try:&#10;        response = openai.chat.completions.create(&#10;            model=&quot;gpt-3.5-turbo&quot;,&#10;            messages=[{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot;}]&#10;        )&#10;        print(&quot;OpenAI API test successful. Response:&quot;, response.choices[0].message.content)&#10;        return True&#10;    except Exception as e:&#10;        print(&quot;OpenAI API test failed:&quot;, e)&#10;        return False&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;Testing OpenAI API connectivity...&quot;)&#10;    if not test_openai_api():&#10;        print(&quot;Exiting due to OpenAI API connectivity issues.&quot;)&#10;        exit(1)&#10;    messages = [&#10;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;You are a helpful assistant.&quot;}&#10;    ]&#10;    while True:&#10;        user_input = recognize_speech()&#10;        if user_input:&#10;            messages.append({&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: user_input})&#10;            try:&#10;                reply = chat_with_openai(messages)&#10;                print(&quot;Assistant:&quot;, reply)&#10;                speak_text(reply)&#10;                messages.append({&quot;role&quot;: &quot;assistant&quot;, &quot;content&quot;: reply})&#10;            except Exception as e:&#10;                print(&quot;Error:&quot;, e)&#10;        else:&#10;            print(&quot;Please try speaking again.&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>